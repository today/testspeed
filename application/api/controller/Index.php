<?php
/*
 * @author 靳建飞 | e-mail:244029746@qq.com
 * @copyright 靳建飞 2018.3.14 星期三
 * ios/android 接口：应用类 Index
 */
namespace app\api\controller;

use app\admin\controller\Goods;
use app\admin\model\AssetsInfos;
use app\admin\model\Configs;
use app\admin\model\Inform;
use app\admin\model\InviteRecord;
use app\admin\model\Mining;
use app\admin\model\Power;
use app\admin\model\Runs;
use app\admin\model\System;
use app\admin\model\Tokens;
use app\admin\model\UserAssets;
use app\admin\model\Users;
use app\admin\model\Version;
use Img\Utils;
use PHPQRCode\QRcode;
use think\Db;
use think\Exception;
use think\facade\Cache;
use think\facade\Debug;
use think\facade\Request;
class Index extends Base
{

    public function initialize()
    {
        /*parent::initialize();*/ // TODO: Change the autogenerated stub
        header("Access-Control-Allow-Origin: ityangs.net");
        header("Access-Control-Allow-Origin: *");

        $signData['time'] = $this->request->post('time');
        $signId = $this->request->post('id');
        $signNow =$this->request->post('sign');

        if(!$signData['time']){
            exit(json_encode(array('code'=>4001,'msg'=>'非法请求,参数无效')));
        }

        if($signData['time'] < ( time()-3600000 )) {
            exit(json_encode(array('code'=>4001,'msg'=>'非法请求')));
        }

        if($signId){
            $signData['id'] = $signId;
        }

        if($this->MakeSign($signData) != $signNow){
            \think\facade\Log::error('csign:'.$signNow.'; ssign:'.$this->MakeSign($signData));
            exit(json_encode(array('code'=>4000,'msg'=>'签名错误')));
        }
    }

    /**
     * 修改用户昵称
     */
    public function updateNickName(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        $name = $this->request->post('name');
        if(!$name){
            return $this->output('-1','用户昵称不能为空');
        }
        if(mb_strlen($name) > 10)
        {
            return $this->output('-1','昵称不能大于10位');
        }

        if(preg_match('/\d{4,}/',$name))
        {
            return $this->output('-1','昵称不合法！');
        }

        $user = Users::get($id);
        $user->usr_nickname = $name;
        $result = $user->save();
        if($result) {
            return $this->output(200,'用户名修改成功',array('usr_nickname'=>$name));
        }
        return $this->output(-1,'用户名修改失败!');


    }

    /**
     * 获取用户信息
     */
    public function userInfo(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        $tab = array();
        $user = Users::get($id);

        if($user['usr_init'] == -1){
            array_push($tab,'创世居民');
        }
        $power = $user['usr_computing_power'];
        switch ($power) {
            case $power > 0 && $power <= 100:
                $tip = '初级矿工';
                break;
            case $power >100 && $power <=200:
                $tip = '中级矿工';
                break;
            case $power >200 && $power <=300:
                $tip = '高级矿工';
                break;
            case $power >300:
                $tip = '特级矿工';
                break;
        }

        array_push($tab,$tip);
        $user['tab'] = $tab;
        return $this->output(200,'ok',$user);
    }

    /**
     * 登录接口
     */
    public function login(){
        $phone = $this->request->post('phone');
        $captcha = $this->request->post('captcha');
        if(!$captcha) {
            return $this->output('-1','请输入验证码');
        }
//        缓存中手机验证码
//        $validate = Cache::pull($phone);
        $validate = Cache::get($phone);
        if($validate !== $captcha){
            return $this->output('-1','验证码失效');
        }

        $user = Users::where('usr_phone',$phone)->field('usr_id,usr_phone,usr_init,usr_is_identity,usr_hash,usr_nickname')->find();
        //获取后台设置用户算力
        $power = tpCache('hotc_set');

        if( empty($user) ) {   //用户不存在
            $creUserAsset = array();
            $friendOn = false; // 判断邀请功能
            $friendCompel = false;  //判断强制功能
            $friendPUser = false;//是否存在父类
            //获取邀请设置
            $friend = tpCache('friend_set');
//            dump($friend);
            if( $friend['friend_on'] == 1) {//邀请功能开启
                $friendOn = true;
                if( $friend['firend_compel'] == 1 ) {  //强制功能开启
                    $friendCompel = true;
                }
            }

            $usrCode1 = strtoupper(trim($this->request->post('userCode')));  //接收邀请码
            $usrCode2 = strtoupper(trim($this->request->post('userCodeg')));  //接收邀请码
            $usrCode = $usrCode1 ? $usrCode1 : $usrCode2;
            //邀请功能开启
            if( $friendOn ) {

                if( $friendCompel ) {
                    //判断邀请码是否存在
                    if(!isset($usrCode) || empty($usrCode) || !$usrCode) { // 邀请码必填
                        return $this->output(-1,'邀请码必填');
                    }

                    $userInvite = Users::where(strtoupper('usr_code'),$usrCode)->field('usr_id,usr_invite_number,usr_pid')->find();
                    if(!$userInvite) {
                        return $this->output(-1,'邀请码不存在');
                    }

//                    if($userInvite->usr_invite_number > 29)
//                    {
//                        return $this->output(-1,'邀请次数已超过上限30人');
//                    }

                } else { //非强制

                    if( !empty(trim($usrCode)) ) {
                        $userInvite= Users::where('usr_code',$usrCode)->field('usr_id,usr_invite_number,usr_pid')->find();
                    }
                }

            }

            $newsUser = array(//创建用户数据
                'usr_phone' => $phone,
                'usr_is_identity' => -1,
                'usr_init' =>1,
                'usr_nickname' =>'酒生'.mt_rand(1,99),
                'usr_hash' => md5(uniqid(true))
            );

            //用户有邀请码 且邀请码存在
            if(isset($userInvite) && $userInvite) {
                $parent = $this->parentId($userInvite->usr_pid);
                $newsUser['usr_pid'] = $userInvite->usr_id;
                $friendPUser = true;
            }

            //添加用户
            $user = Users::create($newsUser);

            if($user) {
                $sys_computing_power = $power['power_register'];//永久算力
                $sys_sort_power = 0;//临时算力

                //新注册赠送算力
                $this->addpower($user->usr_id,$power['power_register'],'新注册赠送');//用户注册 +算力


                // 新注册赠送礼包       tokenid,        user_id,                 增加代币数量       内容,     显示时间, 1挖矿2奖励, -1未转化
                $this->createAssets($power['power_coin'],$user->usr_id,$power['power_coin_num'],'注册礼包',time()-3600,$creUserAsset,2,-1);//注册用户
                //赠送5个币
                $this->createAssets($power['power_coin'],$user->usr_id,0.2,'注册礼包',time(),$creUserAsset,2,-1,0,true);

                //有上级用户
                if( $friendPUser ) {


                    //赠送代币
                    if($friend['friend_mining_num'] > 0) { //赠送代币
                                            // 赠送代币id                   邀请用户ID
                        $this->createAssets($friend['friend_mining_coin'],$userInvite->usr_id,$friend['friend_mining_num'],'邀请好友礼包',time()-3600,$creUserAsset,2,-1,1);//邀请用户矿产
                    }

                    //赠送算力
                    if( $friend['firend_power_num'] > 0) {//赠送算力
                        if($friend['firend_power_type'] == 1 ) { //永久算力
                            //系统增加算力
                            $sys_computing_power +=$friend['firend_power_num'];
                            //邀请好友赠送算力

                            $this->addpower($userInvite->usr_id,$friend['firend_power_num'],'邀请用户赠送');//用户注册 +算力
                            //邀请人加算力
                            Users::where('usr_id',$userInvite->usr_id)->inc('usr_invite_number',1)->update();
                        }else if($friend['firend_power_type'] == -1) {//临时算力
                            //系统增加算力
                           $sys_sort_power += $friend['firend_power_num'];

                            //邀请好友赠送算力
                            $this->addpower($userInvite->usr_id,$friend['firend_power_num'],'邀请用户临时算力');//用户注册 +算力
                            //系统增加人数
                            Users::where('usr_id',$userInvite->usr_id)->inc('usr_invite_number')->update();
                        }
                    }

                    //邀请记录
                    $invite = array(
                        'ir_user_id' => $user->usr_id,
                        'ir_user_pid'=>$userInvite->usr_id,
                        'ir_token_id'=> $friend['friend_mining_coin'],
                        'ir_token_number' => $friend['friend_mining_num'],
                        'ir_power_number' => $friend['firend_power_num'],
                        'ir_power_type' => $friend['firend_power_type'],
                    );
                    InviteRecord::create($invite);


                    if ($parent)
                    {
                        foreach ($parent as $v)
                        {
                            $this->addpower($v['usr_id'],$v['power'],'邀请用户获赠酿力');//用户注册 +算力
                        }
                        $allParentPower = array_sum(array_column($parent,'power'));
                    }else{
                        $allParentPower = 0;
                    }

                }else{
                    $allParentPower = 0;
                }

                //系统增加算力    系统增加人数
                System::where('sys_id','sys')->inc('sys_user_num',1)->inc('sys_computing_power',($sys_computing_power+$allParentPower))->inc('sys_sort_power',$sys_sort_power)->update();

                //产生矿产
                $ass = new AssetsInfos();
                $ass->saveAll($creUserAsset);

            }

        }else{
            $user->usr_hash= md5(uniqid(true));
            $user->save();
            //获取最新算力
            $powerDate = Power::where(['pow_user_id'=>$user->usr_id, 'pow_type'=>1])->whereTime('pow_create_time','today')->value('pow_create_time');

            if(!$powerDate) {
                //系统增加算力
                System::where('sys_id','sys')->setInc('sys_computing_power',$power['power_register']);

                $this->addpower($user->usr_id,$power['power_login'],'每日登录',1);//用户登录  +算力
            }
        }

        return $this->output(200,'ok',$user);
    }

    /**
     * 获取父级ID
     */
    public function parentId($id)
    {
        $user = Users::where('usr_id',$id)->field('usr_id,usr_pid')->find();

        if(!$user){
            return false;
        }

        $array[] = array('usr_id'=>$user->usr_id,'power'=>5);

        if($user['usr_pid']){
            $user = Users::where('usr_id',$user->usr_pid)->field('usr_id,usr_pid')->find();
            $array[] = array('usr_id'=>$user->usr_id,'power'=>1);
        }

        return $array;
    }

    /**
     *
     */
    public function creatFivePower($token_id,$uid,$token_number){
        $newTime = time();
        $result = array();
        for($i=0;$i<5;$i++){
            $data['ai_token_id'] = $token_id;
            $data['ai_user_id'] = $uid;
            $data['ai_content'] = '注册礼包';
            $data['ai_create_time'] = $newTime;
            $data['ai_number'] = $token_number * 100000;//矿产数量
            $data['ai_type'] = 2;//矿产类型 1挖矿 2奖励
            $data['ai_status'] = -1;//矿产状态 未转化
            $data['ai_friend_type'] = 0;////是否邀请好友  0 非  1是
            // 新注册赠送礼包       tokenid,        user_id,                 增加代币数量       内容,     显示时间, 1挖矿2奖励, -1未转化
//            $this->createAssets($token_id,$uid,0.2,'注册礼包',$newTime,2,-1);//注册用户
            $ta[] = $data;
            $newTime += 7200;
        }

        dump($ta);die;

    }


    /**
     * 增加算力方法
     * @param $userId  用户ID
     * @param $power 用户算力
     * @param $desc 算力标注
     * @return bool 状态
     */
    public function addpower($userId,$power,$desc,$type= -1){//power 表
        Db::startTrans();
        try {
            Db::name('power')->data(['pow_user_id'=>$userId,'pow_number'=>$power,'pow_desc'=>$desc,'pow_create_time'=>time(),'pow_type'=>$type])->insert();
            Db::name('users')->where('usr_id',$userId)->setInc('usr_computing_power',$power);
            // 提交事务
            Db::commit();
            return true;
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            return false;
        }
    }

    /**
     * 矿产写入
     * @param $coin  代币ID
     * @param $id    用户ID
     * @param $content   矿产内容
     * @param $time
     * @param int $type
     * @param int $status
     */
    public function createAssets($coin,$id,$number,$content,$time,&$result,$type=2,$status=-1,$friend_type = 0,$circulation=false){
        if($circulation){
            for($i=0;$i<5;$i++){
                $data['ai_token_id'] = $coin;
                $data['ai_user_id'] = $id;
                $data['ai_content'] = $content;
                $data['ai_create_time'] = $time;
                $data['ai_number'] = $number * 100000;//矿产数量
                $data['ai_type'] = $type;//矿产类型 1挖矿 2奖励
                $data['ai_status'] = $status;//矿产状态 未转化
                $data['ai_friend_type'] = $friend_type;////是否邀请好友  0 非  1是
                // 新注册赠送礼包       tokenid,        user_id,                 增加代币数量       内容,     显示时间, 1挖矿2奖励, -1未转化
    //            $this->createAssets($token_id,$uid,0.2,'注册礼包',$newTime,2,-1);//注册用户
                array_push($result,$data);
                $time += 7200;
            }
        }else{
            $data['ai_token_id'] = $coin;
            $data['ai_user_id'] = $id;
            $data['ai_content'] = $content;
            $data['ai_create_time'] = $time;
            $data['ai_number'] = $number * 100000;//矿产数量
            $data['ai_type'] = $type;//矿产类型 1挖矿 2奖励
            $data['ai_status'] = $status;//矿产状态 未转化
            $data['ai_friend_type'] = $friend_type;//是否邀请好友  0 非  1是
            array_push($result,$data);
        }

        return $result;
    }


    /**
     *分享显示接口口
     */
     public function share(){
         $id = $this->request->post('id');
         if(!$id){
             return $this->output('-1','用户id不存在');
         }
         $user = Db::name('invite_record')->rightJoin('hw_users','usr_id = ir_user_pid')->where('usr_id',$id)
             ->field('count(ir_id) usr_invite_number,sum(ir_power_number) usr_power_number, round(sum(ir_token_number)/100000,5)
              usr_token_number,usr_id,usr_code')->find();
         if($user['usr_power_number'] == null)  $user['usr_power_number']=0;
         if($user['usr_token_number'] == null)  $user['usr_token_number']=0;
//         $user['usr_surplus_number'] = 30-(int)$user['usr_invite_number'];
         $user['usr_surplus_number'] = 0;
         return $this->output(200,'ok',$user);
     }


    /**
     * 每日首次进入
     */
    public function dayFirst(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }

        $token = $this->request->post('token');
        $userToken = Users::where('usr_id',$id)->value('usr_hash');
        if($userToken !== $token){
            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
        }

        //获取最新算力
        $powerDate = Power::where(['pow_user_id'=>$id,'pow_type'=>1])->whereTime('pow_create_time','today')->value('pow_create_time');

        if(!$powerDate) {

            //获取后台设置用户算力
            $power = tpCache('hotc_set');

            //系统增加算力
            System::where('sys_id','sys')->setInc('sys_computing_power',$power['power_login']);
            $result = $this->addpower($id,$power['power_login'],'每日登录',1);//用户登录  +算力

            if($result) {
                return $this->output(200,'ok',array('power'=>$power['power_login']));
            }
        }
        return $this->output(-2,'您今日已增加过');
    }

    /**
     * 首页酒力值与酒水币接口
     */
    public function drinkValue(){
        try {
            // 这里是主体代码
            $id = $this->request->post('id');
            if(!$id){
                throw new \think\Exception('用户id不存在',-1);
            }
            $user = Db::name('users')->leftjoin('user_assets','usr_id = ua_user_id')->where('usr_id',$id)->where('ua_token_id',1)
                ->field(['usr_id','usr_computing_power','(ua_surplus_number)/100000 as usr_surplus_number'])->find();
            if(!$user){
                // 使用think自带异常类抛出异常
                throw new \think\Exception('用户信息不存在', -1);
            }

        } catch (ValidateException $e) {
            // 这是进行验证异常捕获
            return json($e->getError());
        } catch (\Exception $e) {
            // 这是进行异常捕获
            return $this->output($e->getCode(),$e->getMessage());
        }
        return $this->output(200,'ok',$user);
    }


    /**
     * 酒力值简介
     */
    public function powerDesc(){
        if($this->request->method() == 'POST') {
            try {
                // 这里是主体代码
                $id = $this->request->post('id');
                if(!$id){
                    throw new \think\Exception('用户id不存在',-1);
                }

                $token = $this->request->post('token');
                $userToken = Users::where('usr_id',$id)->value('usr_hash');
                if($userToken !== $token){
                    return $this->output(4004,'您在其他设备设备上登录,请重新登录');
                }

                $user = Users::where('usr_id',$id)->field('usr_id,usr_computing_power,usr_hash')->find();

                //获取后台酒力值简介
                $power = tpCache('drink_desc');
                $user->power_desc = $power['dr_power_desc'];
                if(!$user){
                    // 使用think自带异常类抛出异常
                    throw new \think\Exception('用户信息不存在', -1);
                }

                if($user['usr_hash'] !== $token){
                    throw new \think\Exception('您在其他设备上登录,请重新登录!',4004);
                }
            } catch (ValidateException $e) {
                // 这是进行验证异常捕获
                return json($e->getError());
            } catch (\Exception $e) {
                // 这是进行异常捕获
                return $this->output($e->getCode(),$e->getMessage());
            }
            return $this->output(200,'ok',$user);
        }
    }

    /**
     * 酒水秘籍
     */
    public function drinkDesc(){
        $power = tpCache('drink_desc');
        return $this->output(200,'ok',$power);
    }

    /**
     * 获取用户矿产
     * @return \think\response\Json
     */
    public function showMining(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }

        $token = $this->request->post('token');
        $userToken = Users::where('usr_id',$id)->value('usr_hash');
        if($userToken !== $token){
            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
        }

        $mining = AssetsInfos::where(['ai_user_id'=>$id ,'ai_status'=> -1])->where('ai_create_time < '.time())->field('ai_id,ai_token_id,ai_number')->select();
        return $this->output(200,'ok',$mining);
    }

    /**
     * 收获矿产接口
     */
    public function putMining(){
        $resStatus = false;
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        $aId = $this->request->post('aId');
        //获取矿产详情
        $assinfo = AssetsInfos::get($aId);
        //如果资产id不存在
        if(empty($assinfo)) {
            //创建资产
            return $this->output('-1','资产不存在！');
        };

        $assNum = $assinfo->getData('ai_number');

        //获取资产ID
        $uaId = UserAssets::where('ua_user_id',$id)->where('ua_token_id',$assinfo->ai_token_id)->value('ua_id');
        //如果资产id不存在
        if(empty($uaId)) {
            //创建资产
            $arr = UserAssets::create(['ua_user_id'=>$id,'ua_token_id'=>$assinfo->ai_token_id]);
            $uaId = $arr->ua_id;//资产id
        };

        // 启动事务
        Db::startTrans();
        try {
//            Db::name('users')->where('id')find(1);
            $r = Db::name('assets_infos')->where(['ai_id'=>$aId,'ai_status'=>-1])->update(['ai_status'=>1,'ai_conv_time'=>time(),'ai_user_assets_id'=>$uaId]);
//            dump($r);die;
            if(!$r){
                throw new \think\Exception('已转换');
            }
            Db::name('system')->where('sys_id','sys')->inc('sys_all_mining',1)->update();
            Db::name('user_assets')->where('ua_id',$uaId)->inc('ua_number',$assNum)->inc('ua_surplus_number',$assNum)->update();
            // 提交事务
            Db::commit();
            $resStatus = true;
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            $resStatus = false;
        }

        if($resStatus){
            return $this->output(200,'成功');
        }
        return $this->output(-1,'失败');
    }


    /**
     * 排行榜页面接口
     * @return \think\response\Json
     */
    public function sortList(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }

        $token = $this->request->post('token');
//        $userToken = Users::where('usr_id',$id)->value('usr_hash');
//        if($userToken !== $token){
//            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
//        }

        $sortUser = Cache::get('sort_user'); //前10名用户
        $sortList = Cache::get('sort_list');
//        dump($sortList);
        $num= array_search($id,$sortList); //当前排名

        if($num !== null)
        {
            $num++;
        }else{
            $num = 0;
        }

        $system = System::get(['sys_id'=>'sys'])->find();
        $allPerson = $system['sys_user_num'];
//全部矿产数量
        $mining = $system['sys_all_mining'];

        //今日矿产数量
        $daymining = Db::name('assets_infos')->where('ai_status',1)->whereTime('ai_conv_time','today')->count();

        $data = [
            'sortUser'=>$sortUser,
            'num'=>$num,
            'allMining'=>$mining,
            'dayMining'=>$daymining,
            'allPerson' => $allPerson
        ];

        return $this->output(200,'ok',$data);

    }

    /**
     * 公告接口
     */
    public function inform(){
        $inform = Inform::where('if_status',1)->order('if_create_time','desc')->limit(1)->value('if_content');
        return $this->output(200,'ok',array('if_content'=>$inform));
    }


    /**
     * 获取用户算力接口
     * @return \think\response\Json
     */
    public function myPower(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }

        $page = $this->request->post('page',1);
        $pageNum = 10;
        $pageStart = ($page-1) * $pageNum;
        $result =  Power::where('pow_user_id',$id)->limit($pageStart,$pageNum)->order('pow_create_time','desc')->select();

        return $this->output(200,'ok',$result);
    }

    /**
     * 查看单个币种收支记录
     */
    public function tokeninfo(){
        $id = $this->request->post('id');//用户ID
        $tokId = $this->request->post('tokId'); //资产ID
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        if(!$tokId){
            return $this->output('-1','Token ID不存在');
        }

        $page = $this->request->post('page',1);
        $pageNum = 15;
        $pageStart = ($page-1) * $pageNum;

        $result = AssetsInfos::with('token')->where('ai_token_id',$tokId)->where('ai_user_id',$id)->where('ai_status',1)->limit($pageStart,$pageNum)->order('ai_conv_time','desc')->select();

        return $this->output(200,'ok',$result);
    }



    /**
     * 币种详情介绍
     */
    public function token(){
        $assetId = $this->request->post('assetId');//token ID
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        if(!$assetId){
            return $this->output('-1','资产ID不存在');
        }

        $token = UserAssets::with('tokeninfo')->where('ua_id',$assetId)->where('ua_user_id',$id)->find();

        return $this->output(200,'ok',$token);
    }

    /**
     * 全部资产明细
     */
    public function assetinfo(){
        if($this->request->method() == 'POST') {
            $id = $this->request->post('id');
            if(!$id){
                return $this->output('-1','用户id不存在');
            }

            $token = $this->request->post('token');
            $userToken = Users::where('usr_id',$id)->value('usr_hash');
            if($userToken !== $token){
                return $this->output(4004,'您在其他设备设备上登录,请重新登录');
            }

            $page = $this->request->post('page',1);
            $pageNum = 15;
            $pageStart = ($page-1) * $pageNum;
            $asset = AssetsInfos::with('token')->where('ai_status',1)->where('ai_user_id',$id)->limit($pageStart,$pageNum)->order('ai_conv_time','desc')->select();
            return $this->output(200,'ok',$asset);
        }
    }

    /**
     * 资产显示接口
     */
    public function tokenasset(){
        if($this->request->method() == 'POST') {
            $id = $this->request->post('id');//用户id
            if(!$id){
                return $this->output('-1','用户id不存在');
            }

            $token = $this->request->post('token');
            $userToken = Users::where('usr_id',$id)->value('usr_hash');
            if($userToken !== $token){
                return $this->output(4004,'您在其他设备设备上登录,请重新登录');
            }

            $asset = UserAssets::with('token')->where('ua_user_id',$id)->select();
            return $this->output(200,'ok',$asset);
        }
    }


    /**
     * 身份验证接口
     */
    public function identity(){
        $name = $this->request->post('name');
        $number = $this->request->post('number');
        $id = $this->request->post('id');

        if(!$id){
            return $this->output('-1','用户id不存在');
        }

        if($name == null) {
            return $this->output(4001,'用户名不能为空');
        }

        $reg = '/^(\d{15}$|^\d{18}$|^\d{17}(\d|X|x))$/';
        if(!preg_match($reg,$number)) {
            return $this->output(4001,'身份证号不合法!');
        }

        if(Users::where('usr_identity',$number)->find()){
           return $this->output(-1,'该身份证号已实名认证过');
        }

        $host = "https://1.api.apistore.cn";
        $path = "/idcard3";
        $bodys = "cardNo=".$number."&realName=".$name;

        $result = name_post($host,$path,$bodys);
        $arrayResult = json_decode($result,true);
        if($arrayResult['error_code'] === 0 && $arrayResult['reason'] === '认证通过'){
            //认证通过
            $data = $arrayResult['result']['details'];
            $data['usr_identity_time'] = time();
            $data['usr_is_identity'] = 1;
            $data['usr_realname'] = $name;
            $data['usr_identity'] =  $number;
            $data['usr_identity'] =  $number;
            $data['usr_code'] = str_pad($id,6,0,STR_PAD_LEFT);
             // 在实名认证做创世居民
            if($id < 10000){
                $data['usr_init'] = -1;
            }

            $output = Users::where('usr_id', $id)->update($data);
            
            if(!$output){
                //更新失败
                return $this->output(-1,'认证失败,请刷新后认证');
            }
            return $this->output(200,'认证成功!',array('usr_is_identity'=>1,'usr_realname'=>$name,'usr_identity'=>$number));
        }

        return $this->output(-1,'实名认证失败');
    }



    /**
     * 短信请求接口
     */
    public function sms(){
        $phone = $this->request->post('phone');
        $num = mt_rand(1000,9999);
        $result = tpCache('alisms'); //阿里鱼配置信息
        $output = sendSms($result['sms_appkey'],$result['sms_secret'],$phone,$result['sms_sign'],$result['sms_code'],$num);
        //判断手机用户是否存在
        $user =  Users::where('usr_phone',$phone)->find();
        if($user){
            $data['userNew'] = -1;
            $data['friendOn'] = 0; //是否开启邀请功能
            $data['firendCompel'] = 0;
        }else{
            $friend = tpCache('friend_set');//获取邀请规则
            $data['userNew'] = 1;
            $data['friendOn'] = $friend['friend_on']; //是否开启邀请功能
            $data['firendCompel'] = $friend['firend_compel']; //是否强制邀请
        }
        if($output->Code == 'OK'){
            Cache::set($phone,$num,0);

           return $this->output(200,'ok',$data);
        }else{
           return $this->output(-1,'短信发送失败');
        };
    }




    /**
     * @param $code
     * @param string $msg
     * @param array $data
     * @return \think\response\Json
     */
    public function output($code,$msg='ok',$data=array()){
        $result = array(
            'code'=>$code,
            'msg' => $msg,
            'data' => $data
        );

        return json($result);
    }

    /**
     * 分享后的图片
     */
    public function shareInfo(){
        $id = $this->request->post('id');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        $code = Users::where('usr_id',$id)->value('usr_code');
        $url = "https://drink.1ssjs.com/download/index.html?code=".$code;
        $code_path = 'upload/'.md5($id).'.png';
        QRcode::png($url, $code_path ,1, 8, 0);
        $userimg = $code;

        $utils = new Utils();
        $tmp_qr_path = "upload/share.png";
        $share_apth = "upload/shares/".$userimg.".jpg";
        $target = $utils->imagecreates($tmp_qr_path);


        $utils->mergeImage($target,$code_path,array('left' => 260, 'top' => 790, 'width' => 230, 'height' => 230));

        $im = imagecreatetruecolor(400, 30);
        $black = imagecolorallocate($im, 117, 48, 0);
        $font = 'MicrosoftYaHei.ttf';

        imagettftext($target , 55 , 0 , 220 , 654 ,$black, $font , $code);

        imagepng($target,$share_apth);

        $img = HTTP_URL.DIRECTORY_SEPARATOR.$share_apth;

        return $this->output(200,'ok',array('img'=>$img));
    }

    /**
     * 我的公告
     */
    public function myInform(){
        $inform = Inform::where('if_status',1)->order('if_create_time','desc')->select();
        return $this->output(200,'ok',$inform);
    }


    /**
     * 更新接口
     */
    public function version(){
        $id = $this->request->post('id');
        $type = $this->request->post('tport');
        if(!$id){
            return $this->output('-1','用户id不存在');
        }
        if(!$type){
            return $this->output('-1','请求端类型不存在');
        }

        $version = Version::where('vs_type',$type)->order('vs_create_time','desc')->limit(1)->find();

        return $this->output(200,'ok',$version);
    }

    /**
     * 意见反馈
     * @return \think\response\Json
     */
    public function website(){
       $website = tpCache('website_info');

        return $this->output(200,'ok',$website);
    }

    public function byNow(){
        if(!$this->request->post('pid') || !$this->request->post('uid') || !$this->request->post('token')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $user = Users::find($this->request->post('uid'));
        if(!$user){
            exit(json_encode(array('code'=>4006,'msg'=>'用户不存在')));
        }

        $userToken = Users::where('usr_id',$this->request->post('uid'))->value('usr_hash');
        if($userToken !== $this->request->post('token')){
            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
        }

        $goods = Goods::find($this->request->post('pid'));
        if($goods){
            if($goods->is_use == 1){
                exit(json_encode(array('code'=>4005,'msg'=>'商品已下架')));
            }else{
                $asset = UserAssets::with('token')->where('ua_user_id',$this->request->post('uid'))->select();
                var_dump($asset);die;
            }

        }else{
            exit(json_encode(array('code'=>4003,'msg'=>'无效的请求参数')));
        }
    }
}