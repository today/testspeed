<?php
namespace app\api\controller;

use app\admin\model\AssetsInfos;
use app\admin\model\Banner;
use app\admin\model\Configs;
use app\admin\model\Goods;
use app\admin\model\GoodsBrand;
use app\admin\model\GoodsCategory;
use app\admin\model\Order;
use app\admin\model\Power;
use app\admin\model\UserAssets;
use app\admin\model\Users;
use Pay\Pay;
use think\facade\Cache;

class Mall extends Base
{
    public function initialize()
    {
        /*parent::initialize();*/ // TODO: Change the autogenerated stub
        header("Access-Control-Allow-Origin: ityangs.net");
        header("Access-Control-Allow-Origin: *");
        $post = $this->request->post();
        unset($post['sign']);

        if(!$this->request->post('timestamp') || !$this->request->post('sign') || !$this->request->post('uid')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        if($this->request->post('timestamp') < time()-360 || $this->request->post('timestamp') > time()+360) {
            exit(json_encode(array('code'=>4002,'msg'=>'时间戳验证失败')));
        }
        //var_dump($this->MakeSign($post));die;
        if($this->MakeSign($post) != $this->request->post('sign')){
            exit(json_encode(array('code'=>4000,'msg'=>'签名错误')));
        }
    }
    public function index(){
        $drink_price = Configs::find(31);
        $banner = Banner::where('is_show',0)->order('asort asc')->select();
        $bannerArr = array();
        foreach($banner as $item){
            $item['pic_url'] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$item['pic'];
            $bannerArr[] = $item;
        }

        $brand = GoodsBrand::where('is_show',0)->order('asort asc')->select();
        $brandArr = array();
        foreach($brand as $item){
            $item['icon_url'] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$item['icon'];
            $brandArr[] = $item;
        }

        $hot = Goods::where('is_use',0)->where('is_hot',1)->order('id asc')->select();
        $hotArr = array();
        foreach($hot as $value){
            $value['image_url'] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$value['image'];
            $value['drink'] = number_format($value['price']/$drink_price['c_value'],2);
            $hotArr[] = $value;
        }

        $data = array(
            'banner' =>$bannerArr,
            'brand' =>$brandArr,
            'hot' =>$hotArr,
        );

        return $this->output(200,'success',$data);
    }

    public function productList(){
        $drink_price = Configs::find(31);
        if(!$this->request->post('brand_id')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $brand_id = $this->request->post('brand_id');
        $category = GoodsCategory::where('is_use',0)->select();
        $brand = GoodsBrand::find($brand_id);

        $goods = Goods::where('brand_id',$brand_id)->where('is_use',0);

        if($this->request->post('category_id')){
            $goods = $goods->where('category_id',$this->request->post('category_id'));
        }

        //排序
        if($this->request->post('sort') == 'sales_desc'){
            $goods = $goods->order('sales desc');
        }elseif($this->request->post('sort') == 'sales_asc'){
            $goods = $goods->order('sales asc');
        }elseif($this->request->post('sort') == 'price_desc'){
            $goods = $goods->order('price desc');
        }elseif($this->request->post('sort') == 'price_asc'){
            $goods = $goods->order('price asc');
        }elseif($this->request->post('sort') == 'time_desc'){
            $goods = $goods->order('id desc');
        }elseif($this->request->post('sort') == 'time_asc'){
            $goods = $goods->order('id asc');
        }else{
            $goods = $goods->order('id desc');
        }
        if($this->request->post('page')){
            $page = $this->request->post('page');
        }else{
            $page = 1;
        }
        $goods = $goods->page($page,20)->select();
        $goodsArr = array();
        foreach($goods as $good){
            $good['image_url'] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$good['image'];
            $good['drink'] = number_format($good['price']/$drink_price['c_value'],2);
            $goodsArr[] = $good;
        }
        $data = array(
            'brand' => $brand,
            'category' => $category,
            'goods' => $goodsArr,
            'page' => (int)$page
        );
        return $this->output(200,'success',$data);
    }

    public function productDetail(){
        if(!$this->request->post('pid')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $drink_price = Configs::find(31);
        $goods = Goods::find($this->request->post('pid'));
        if($goods){
            $brand = GoodsBrand::find($goods['brand_id']);
            $category = GoodsCategory::find($goods['category_id']);
            $goods->brand_name = $brand['name'];
            $goods->category_name = $category['name'];
            $goods->image_url = 'http://'.$_SERVER['HTTP_HOST'].'/'.$goods['image'];
            $goods->drink_price = number_format($goods['price']/$drink_price['c_value'],2);
			$goods->content = stripslashes($goods->detail);
            $images = unserialize($goods->files);
            $imagesArr = array();
            foreach($images as $image){
                $imagesArr[] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$image;
            }
            $goods->images = $imagesArr;
            return $this->output(200,'success',$goods);
        }else{
            exit(json_encode(array('code'=>4003,'msg'=>'无效的请求参数')));
        }
    }

    //立即购买验证
    public function byNow(){
        if(!$this->request->post('pid') || !$this->request->post('uid') || !$this->request->post('token')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $user = Users::find($this->request->post('uid'));
        if(!$user){
            exit(json_encode(array('code'=>4006,'msg'=>'用户不存在')));
        }

        /*$userToken = Users::where('usr_id',$this->request->post('uid'))->value('usr_hash');
        if($userToken !== $this->request->post('token')){
            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
        }*/
        $drink_price = Configs::find(31);
        $goods = Goods::find($this->request->post('pid'));
        if($goods){
            if($goods->is_use == 1){
                exit(json_encode(array('code'=>4005,'msg'=>'商品已下架')));
            }else{
                $asset = UserAssets::with('token')->where('ua_user_id',$this->request->post('uid'))->find();
                $drink_price = $goods['price']/$drink_price['c_value'];
                if($drink_price > $asset->ua_surplus_number){
                    exit(json_encode(array('code'=>4007,'msg'=>'您的drink余额不足')));
                }else{
                    $goods->image_url = 'http://'.$_SERVER['HTTP_HOST'].'/'.$goods['image'];
                    $goods->drink_price = $drink_price;
                    $data = array(
                        'goods' => $goods,
                        'mobile' => $user['usr_phone']
                    );
                    return $this->output(200,'success',$data);
                }
            }
        }else{
            exit(json_encode(array('code'=>4003,'msg'=>'无效的请求参数')));
        }
    }

    public function confirmOrder(){
        if(!$this->request->post('pid') || !$this->request->post('num') || !$this->request->post('real_name') || !$this->request->post('mobile') || !$this->request->post('captcha')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $user = Users::find($this->request->post('uid'));
        if(!$user){
            exit(json_encode(array('code'=>4006,'msg'=>'用户不存在')));
        }

        /*$userToken = Users::where('usr_id',$this->request->post('uid'))->value('usr_hash');
        if($userToken !== $this->request->post('token')){
            return $this->output(4004,'您在其他设备设备上登录,请重新登录');
        }*/
        $validate = Cache::get($user->usr_phone);
        if($validate !== $this->request->post('captcha')){
            exit(json_encode(array('code'=>40010,'msg'=>'验证码错误')));
        }

        $goods = Goods::find($this->request->post('pid'));
        if(!$goods){
            exit(json_encode(array('code'=>4009,'msg'=>'商品不存在')));
        }
        if($goods->is_use == 1){
            exit(json_encode(array('code'=>4005,'msg'=>'商品已下架')));
        }

        $drink_price = Configs::find(31);
        $asset = UserAssets::with('token')->where('ua_user_id',$this->request->post('uid'))->find();
        $amount = $goods->price * $this->request->post('num');
        $drink_amount = number_format($amount/$drink_price['c_value'],2);
        if($drink_amount > $asset->ua_surplus_number){
            exit(json_encode(array('code'=>4007,'msg'=>'您的drink余额不足')));
        }
        $orderSn = strtoupper(dechex(date('m'))) . date('d') . substr(time(), -5) . substr(microtime(), 2, 5) . sprintf('%02d', rand(0, 99));
        $order = new Order;
        $order->order_sn = $orderSn;
        $order->goods_id = $this->request->post('pid');
        $order->amount = $amount;
        $order->drink = $drink_amount;
        $order->price = $goods->price;
        $order->num = $this->request->post('num');
        $order->real_name = $this->request->post('real_name');
        $order->mobile = $this->request->post('mobile');
        $order->address = $this->request->post('address');
        $order->remark = $this->request->post('remark');
        $order->uid = $this->request->post('uid');
        $order->goods_name = $goods->name;
        $order->guige = $goods->specification;
        if($this->request->post('remark')){
            $order->remark = $this->request->post('remark');
        }
        $order->status = 0;
        $result = $order->save();
        if($result){
            //减少dink余额
            $asset->ua_number = ($asset->ua_number - $drink_amount)*100000;
            $asset->ua_surplus_number = ($asset->ua_surplus_number - $drink_amount)*100000;
            $asset->save();

            //赠送酿力
            $user->usr_computing_power += $this->request->post('num') * $goods->brewing_power;
            $user->save();
            $power = new Power;
            $power->pow_user_id = $this->request->post('uid');
            $power->pow_create_time = time();
            $power->pow_number = $this->request->post('num') * $goods->brewing_power;
            $power->pow_desc = '购买商品赠送酿力';
            $power->pow_type = 0;
            $power->save();

            //添加明细
            $assets_infos = new AssetsInfos;
            $assets_infos->ai_user_assets_id = $asset->ua_id;
            $assets_infos->ai_user_id = $this->request->post('uid');
            $assets_infos->ai_content = '购买商品';
            $assets_infos->ai_create_time = time();
            $assets_infos->ai_conv_time = time();
            $assets_infos->ai_number = -$drink_amount * 100000;
            $assets_infos->ai_status = 1;
            $assets_infos->ai_type = 3;
            $assets_infos->ai_token_id = $asset->ua_token_id;
            $assets_infos->save();

            $data = array(
                'oid' => $order->id,
                'brewing_power' => (int)$this->request->post('num') * $goods->brewing_power
            );
            return $this->output(200,'success',$data);
        }
    }

    public function orderList(){
        $user = Users::find($this->request->post('uid'));
        if(!$user){
            exit(json_encode(array('code'=>4006,'msg'=>'用户不存在')));
        }
        $orders = Order::where('uid',$this->request->post('uid'))->order('id desc')->select();
        $ordersArr = array();
        foreach($orders as $order){
            $goods = Goods::find($order['goods_id']);
            $order['image_url'] = 'http://'.$_SERVER['HTTP_HOST'].'/'.$goods['image'];
            $order['drink_price'] = $order['drink'] / $order['num'];
            $ordersArr[] = $order;
        }
        return $this->output(200,'success',$ordersArr);
    }

    public function orderDetail(){
        if(!$this->request->post('oid')){
            exit(json_encode(array('code'=>4001,'msg'=>'缺少必要参数')));
        }
        $order = Order::find($this->request->post('oid'));
        if(!$order){
            exit(json_encode(array('code'=>40011,'msg'=>'订单不存在')));
        }
        $user = Users::find($this->request->post('uid'));
        if(!$user){
            exit(json_encode(array('code'=>4006,'msg'=>'用户不存在')));
        }
        $goods = Goods::find($order->goods_id);
        if($goods){
            $order->image_url = 'http://'.$_SERVER['HTTP_HOST'].'/'.$goods->image;
        }
	    $order->drink_price = number_format($order->drink / $order->num,2);

        return $this->output(200,'success',$order);
    }

    public function sms(){
        $phone = $this->request->post('phone');
        $num = mt_rand(1000,9999);
        $result = tpCache('alisms'); //阿里鱼配置信息
        $output = sendSms($result['sms_appkey'],$result['sms_secret'],$phone,$result['sms_sign'],$result['sms_code'],$num);
        //判断手机用户是否存在
        $user =  Users::where('usr_phone',$phone)->find();
        if($user){
            $data['userNew'] = -1;
            $data['friendOn'] = 0; //是否开启邀请功能
            $data['firendCompel'] = 0;
        }else{
            $friend = tpCache('friend_set');//获取邀请规则
            $data['userNew'] = 1;
            $data['friendOn'] = $friend['friend_on']; //是否开启邀请功能
            $data['firendCompel'] = $friend['firend_compel']; //是否强制邀请
        }
        if($output->Code == 'OK'){
            Cache::set($phone,$num,0);
            return $this->output(200,'ok',$data);
        }else{
            return $this->output(-1,'短信发送失败');
        }
    }

    public function output($code,$msg='ok',$data=array()){
        $result = array(
            'code'=>$code,
            'msg' => $msg,
            'data' => $data
        );

        return json($result);
    }

    public function test(){
        $pay = new Pay();
        $result = $pay->test();
        var_dump($result);die;
    }
}